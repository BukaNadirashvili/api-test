{
	"info": {
		"_postman_id": "304c35ba-51ae-448a-b41f-fa7adfb17659",
		"name": "JSON Placeholder API test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17426900"
	},
	"item": [
		{
			"name": "List of posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response JSON\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"// Get the first post ID from the 'data' array\r",
							"const firstPostId = responseJson[0].id;\r",
							"\r",
							"// Set the first post ID as a collection variable\r",
							"pm.collectionVariables.set(\"postId\", firstPostId);\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct post retrived\", () => {\r",
							"\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    const postId = Number(pm.collectionVariables.get(\"postId\"));\r",
							"\r",
							"\r",
							"    const result = postId === response.id;\r",
							"\r",
							"    pm.expect(result).to.be.true;\r",
							"    \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{postId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Post created successfully\", () => {\r",
							"\r",
							"    const response = pm.response.json();\r",
							"    const result = 'id' in response;\r",
							"    \r",
							"    pm.expect(result).to.be.true;\r",
							"\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=UTF-8",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"foo\",\r\n    \"body\": \"bar\",\r\n    \"userId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Post updated successfully\", () => {\r",
							"\r",
							"    const requestBody = JSON.parse(pm.request.body);\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    let result = true;\r",
							"\r",
							"    for (const key of Object.keys(requestBody)) {\r",
							"        \r",
							"        if(requestBody[key] !== response[key]) {\r",
							"            result = false;\r",
							"            break;\r",
							"        }\r",
							"\r",
							"    }\r",
							"\r",
							"    pm.expect(result).to.be.true;\r",
							"    \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"title\": \"foo\",\r\n    \"body\": \"bar\",\r\n    \"userId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{postId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Patching a resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Post updated successfully\", () => {\r",
							"\r",
							"    const requestBody = JSON.parse(pm.request.body);\r",
							"    const response = pm.response.json();\r",
							"\r",
							"    let result = true;\r",
							"\r",
							"    for (const key of Object.keys(requestBody)) {\r",
							"        \r",
							"        if(requestBody[key] !== response[key]) {\r",
							"            result = false;\r",
							"            break;\r",
							"        }\r",
							"\r",
							"    }\r",
							"\r",
							"    pm.expect(result).to.be.true;\r",
							"    \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"foo\",\r\n    \"test\": \"test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{postId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{postId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Books By User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"All books are from correct user\", () => {\r",
							"    \r",
							"    const response = pm.response.json();\r",
							"    const userId = Number(pm.request.url.query.get('userId'));\r",
							"\r",
							"    const result = response.every(book => \r",
							"        book.userId === userId && typeof book.userId === 'number'\r",
							"    );\r",
							"\r",
							"    pm.expect(result).to.be.true;\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts/?userId=1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						""
					],
					"query": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://jsonplaceholder.typicode.com"
		},
		{
			"key": "postId",
			"value": ""
		},
		{
			"key": "1",
			"value": ""
		}
	]
}